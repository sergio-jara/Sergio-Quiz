default_platform(:ios)

platform :ios do
  desc "Build the app"
  lane :build do
    build_ios_app(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      configuration: "Debug",
      clean: true,
      output_directory: "build",
      skip_codesigning: true,
      skip_package_ipa: true
    )
  end

  desc "Run unit tests only (without cocoapods)"
  lane :unit_test_only do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,OS=latest",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"],
      code_coverage: true,
      output_types: "html,junit"
    )
  end

  desc "Run unit tests only"
  lane :unit_test do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,id=BD104AFC-1D8A-43E6-BEA2-DF9CD117DD73",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output"
    )
  end

  desc "Run UI tests only"
  lane :ui_test do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuizUITests",
      destination: "platform=iOS Simulator,OS=latest",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output"
    )
  end

  desc "CI pipeline - build and unit tests only"
  lane :ci do
    build_ios_app(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      configuration: "Debug",
      clean: true,
      output_directory: "build",
      skip_codesigning: true,
      skip_package_ipa: true
    )
    
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,OS=latest",
      clean: false,
      skip_build: true,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"]
    )
  end

  desc "CI pipeline - unit tests only (no build, no UI tests)"
  lane :ci_unit_tests_only do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "generic/platform=iOS Simulator",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"]
    )
  end

  desc "GitHub Actions - unit tests only (simple and robust)"
  lane :github_actions do
    # First, let's see what simulators are actually available
    UI.message("Checking available simulators...")
    available_simulators = sh("xcrun simctl list devices available", log: false)
    UI.message("Available simulators: #{available_simulators}")
    
    # Use xcodebuild to find available destinations and pick the first iPhone simulator
    # This is more reliable than simctl as it shows what xcodebuild can actually use
    destinations = sh("xcodebuild -project ../DynaQuiz.xcodeproj -scheme DynaQuiz -showdestinations | grep 'iPhone' | head -1", log: false)
    
    if destinations.empty?
      UI.error("No iPhone simulators found in available destinations!")
      UI.error("Available simulators: #{available_simulators}")
      next
    end
    
    # Extract UDID from the destination line
    # Format: "{ platform:iOS Simulator, arch:arm64, id:897B93E4-8BBB-4A79-875D-CAE1F59BE1C3, OS:18.0, name:iPhone 16 }"
    device_match = destinations.match(/id:([A-F0-9-]+)/)
    
    if device_match.nil?
      UI.error("Could not parse UDID from: #{destinations}")
      UI.error("Available simulators: #{available_simulators}")
      next
    end
    
    device_udid = device_match[1]
    
    UI.success("Using iPhone simulator: #{device_udid}")
    
    # Use direct xcodebuild to avoid Fastlane's showBuildSettings timeout
    sh("xcodebuild test -project ../DynaQuiz.xcodeproj -scheme DynaQuiz -destination 'platform=iOS Simulator,id=#{device_udid}' -only-testing:DynaQuizTests -resultBundlePath test_output/DynaQuiz.xcresult -enableCodeCoverage YES")
  end

  desc "Run tests with detailed coverage report"
  lane :coverage do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,OS=latest",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"],
      code_coverage: true,
      output_types: "html,junit",
      output_files: "report.html,report.xml"
    )
    
    # Generate additional coverage report
    sh "xcrun xccov view --report test_output/DynaQuiz.xcresult > test_output/coverage.txt"
    
    UI.success "📊 Coverage report generated!"
    UI.success "📁 HTML Report: test_output/report.html"
    UI.success "📄 Text Report: test_output/coverage.txt"
    UI.success "📋 JUnit Report: test_output/report.xml"
  end

  desc "Clean build artifacts"
  lane :clean do
    clean_build_artifacts
    sh "rm -rf build test_output"
  end
end
