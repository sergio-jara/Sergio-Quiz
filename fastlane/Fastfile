default_platform(:ios)

platform :ios do
  desc "Build the app"
  lane :build do
    build_ios_app(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      configuration: "Debug",
      clean: true,
      output_directory: "build",
      skip_codesigning: true,
      skip_package_ipa: true
    )
  end

  desc "Run unit tests only (without cocoapods)"
  lane :unit_test_only do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,OS=latest",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"],
      code_coverage: true,
      output_types: "html,junit"
    )
  end

  desc "Run unit tests only"
  lane :unit_test do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,id=BD104AFC-1D8A-43E6-BEA2-DF9CD117DD73",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output"
    )
  end

  desc "Run UI tests only"
  lane :ui_test do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuizUITests",
      destination: "platform=iOS Simulator,OS=latest",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output"
    )
  end

  desc "CI pipeline - build and unit tests only"
  lane :ci do
    build_ios_app(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      configuration: "Debug",
      clean: true,
      output_directory: "build",
      skip_codesigning: true,
      skip_package_ipa: true
    )
    
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,OS=latest",
      clean: false,
      skip_build: true,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"]
    )
  end

  desc "CI pipeline - unit tests only (no build, no UI tests)"
  lane :ci_unit_tests_only do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "generic/platform=iOS Simulator",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"]
    )
  end

  desc "GitHub Actions - unit tests only (robust)"
  lane :github_actions do
    require "json"

    # 1) Pick newest available iOS runtime on the runner
    runtimes_json = sh("xcrun simctl list runtimes --json", log: false)
    runtimes = JSON.parse(runtimes_json)["runtimes"]
    ios_runtimes = runtimes.select { |r| r["identifier"].include?("com.apple.CoreSimulator.SimRuntime.iOS") && r["isAvailable"] }
    UI.user_error!("No iOS simulator runtimes installed") if ios_runtimes.empty?
    runtime = ios_runtimes.max_by { |r| Gem::Version.new(r["version"]) }

    # 2) Find or create an iPhone in that runtime
    devices_json = sh("xcrun simctl list devices --json", log: false)
    devices_all = JSON.parse(devices_json)["devices"][runtime["identifier"]] || []
    device = devices_all.find { |d| d["isAvailable"] && d["name"].include?("iPhone") }

    if device.nil?
      # Create a common type that exists on almost all images
      devicetype = "iPhone 15 Pro"
      UI.message "No iPhone device found in #{runtime['name']}, creating #{devicetype}…"
      udid = sh(%Q[xcrun simctl create "CI iPhone" "#{devicetype}" "#{runtime['identifier']}"], log: false).strip
    else
      udid = device["udid"]
    end

    # 3) Boot & wait
    sh("xcrun simctl boot #{udid}", log: false) rescue nil
    sh("xcrun simctl bootstatus #{udid} -b")

    # 4) Run tests targeting that specific simulator
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,id=#{udid}",
      clean: true,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"],
      code_coverage: true,
      output_types: "html,junit"
    )
  end

  desc "Run tests with detailed coverage report"
  lane :coverage do
    scan(
      project: "DynaQuiz.xcodeproj",
      scheme: "DynaQuiz",
      destination: "platform=iOS Simulator,OS=latest",
      clean: true,
      skip_build: false,
      result_bundle: true,
      output_directory: "test_output",
      only_testing: ["DynaQuizTests"],
      code_coverage: true,
      output_types: "html,junit",
      output_files: "report.html,report.xml"
    )
    
    # Generate additional coverage report
    sh "xcrun xccov view --report test_output/DynaQuiz.xcresult > test_output/coverage.txt"
    
    UI.success "📊 Coverage report generated!"
    UI.success "📁 HTML Report: test_output/report.html"
    UI.success "📄 Text Report: test_output/coverage.txt"
    UI.success "📋 JUnit Report: test_output/report.xml"
  end

  desc "Clean build artifacts"
  lane :clean do
    clean_build_artifacts
    sh "rm -rf build test_output"
  end
end
